
					/---------------------------------\
					| GLORIOUS GAMEPLAN FOR MINISHELL |
					\---------------------------------/

Tokenising:
	- splitting on spaces and reserved symbols?
		{' ', '|', '>', '<', '>>', '<<'} NOT '=', ''', '"'
			(don't split ON quotes, and don't split IN quotes)
	- checking what type of WORD a token is?
	- setting flags for parsing

Parser:
	- quote removal (include empty strings ("" and ''))
	- var expansion

Notes:
	if the a special character is the result of an expansion, should we
	mark it as not reserved ? that way the recogniser will exclude them?

TODO:

	must delay opening files until execution! -> DONE
	
	need to close file descriptors directly after a single command execution. -> FIXED

	protect against fork fails: either retry or interrupt the execution of the commands -> FIXED ? need to choose a proper exit status

	norm the "execute_simple_command" function.

	norm the "minishell_execution" file.

	norm the "semantics file" and "command factory file"

	malloc protection when creating redirections

	heredocs seem to be done before launching processes -> DONE!

	make the operators create heredocs for left and right elements. (if there are redirections)

	the operator should disable redirection for the right command if there is no left command.

	create files for commands like "> a | > b | > c | > d" seems like it does not create a and b; -> FIXED!

	this (> a > b) > c does not create files -> fix it! -> DONE !

	issue with non-blocking execution, process creation -> pipes only wait for the very last process...
	so we never get the good execution status...

	watch out for heredocs with && or || operators, we need a separate file for each one. -> FIXED

use commands like these to compare with bash.

issue: we need to distribute operator fds before execution. 
if the child has there own redirection, 
it will overwrite the parents one. 
Problem: if we do it before open the childs, the child will close the fd... -> FIXED

launch heredocs. (ex : <<stop) with no other commands. -> DONE

add_heredoc to history -> DONE

--> signals in heredocs (ctlr -C ) -> solution would be to have 
a global variable to know if there is an active prompt
so that we know if we should close.

error message for non existent command in path (ex: unset PATH; ls) -> DONE

open pipe added to history once merged (cat | .......... ls) -> DONE
